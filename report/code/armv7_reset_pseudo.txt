TakeReset()
CurrentMode = Mode_Thread;
PRIMASK<0> = 0; // priority mask cleared at reset
FAULTMASK<0> = 0; // fault mask cleared at reset
BASEPRI<7:0> = Zeros(8); // base priority disabled at reset

if HaveFPExt() then  // initialize the Floating Point Extn
    /* FP inactive, stack is Main, thread is privileged */
    CONTROL<2:0> = 000;

    CPACR.cp10 = 00;
    CPACR.cp11 = 00;
    FPDSCR.AHP = 0;
    FPDSCR.DN = 0;
    FPDSCR.FZ = 0;
    FPDSCR.RMode = 00;
    FPCCR.ASPEN = 1;
    FPCCR.LSPEN = 1;
    FPCCR.LSPACT = 0;
    FPCAR = bits(32) UNKNOWN;
    FPFSR = bits(32) UNKNOWN;
    for i = 0 to 31
        S[i] = bits(32) UNKNOWN;
else
    /* current stack is Main, thread is privileged */
    CONTROL<1:0> = 00; 

/* all exceptions Inactive */
for i = 0 to 511 
    ExceptionActive[i] = 0;

/* catch-all function for System Control Space reset */
ResetSCSRegs();

/* Synchronization (LDREX* / STREX*) monitor support */
ClearExclusiveLocal(ProcessorID());
ClearEventRegister(); // see WFE instruction for more details
for i = 0 to 12
    R[i] = bits(32) UNKNOWN;

bits(32) vectortable = VTOR<31:7>: 0000000;
SP_main = MemA_with_priv[vectortable, 4, AccType_VECTABLE] AND 0xFFFFFFFC<31:0>;
SP_process = ((bits(30) UNKNOWN): 00);
LR = 0xFFFFFFFF<31:0>; // preset to an illegal exception return value
tmp = MemA_with_priv[vectortable+4, 4, AccType_VECTABLE];
tbit = tmp<0>;
APSR = bits(32) UNKNOWN; // flags UNPREDICTABLE from reset
IPSR<8:0> = Zeros(9); // Exception Number cleared
EPSR.T = tbit; // T bit set from vector
EPSR.IT<7:0> = Zeros(8); // IT/ICI bits cleared
BranchTo(tmp AND 0xFFFFFFFE<31:0>); // address of reset service routine